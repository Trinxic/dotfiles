#    __                 __         __
#   / /  __ _____  ____/ /__  ____/ /__
#  / _ \/ // / _ \/ __/ / _ \/ __/  '_/
# /_//_/\_, / .__/_/ /_/\___/\__/_/\_\
#      /___/_/
# https://wiki.hyprland.org/Hypr-Ecosystem/hyprlock/
# See wiki for default values

general {
    # disable_loading_bar = false  # disables the loading bar on the bottom of the screen while hyprlock is booting up
    # ...
    ignore_empty_input = true  # skips validation when no password is provided
    # immediate_render = false  # makes hyprlock immediately start to draw widgets. Backgrounds will render `background:color` until their `background:path` resource is available
    # ...
}

background {
    monitor =   # monitor to draw on
    path = screenshot  # image path, screenshot or empty to fill with color
    color = rgba(17, 17, 17, 1.0)  # fallback background color
    blur_passes = 1  # the amount of passes to perform. 0 disables blurring
    # blur_size = 7  # blur size (distance)
    # noise = 0.0117  # how much noise to apply
    # contrast = 0.8916  # contrast modulation for blur
    # brightness = 0.8172  # brightness modulation for blur
    # vibrancy = 0.1696  # Increase saturation of blurred colors
    # vibrancy_darkness = 0.05  # How strong the effect of vibrancy is on dark areas
    # reload_time = -1  # seconds between reloading, 0 to reload with SIGUSR2. Ignored if path is screenshot.
    # reload_cmd = [[Empty]]  # command to get new path. If empty, old path will be used.
    # crossfade_time = -1.0  # cross-fade time in seconds between old and new background on reload. A negative value means no cross-fade.
    # zindex = -1  # z-index of the widget
}

image {
    # monitor = [[Empty]]  # monitor to draw on
    # path = [[Empty]]  # image path
    # size = 150  # size scale based on the lesser side of the image
    # rounding = -1  # negative values result in a circle
    # border_size = 0  # border size
    # border_color = rgba(221, 221, 221, 1.0)  # border color
    # rotate = 0  # rotation in degrees, counter-clockwise
    # reload_time = -1  # seconds between reloading, 0 to reload with SIGUSR2
    # reload_cmd = [[Empty]]  # command to get new path. if empty, old path will be used. don’t run “follow” commands like tail -F
    # position = 0, 0  # position of the image
    # halign = center  # horizontal alignment
    # valign = center  # vertical alignment
    # zindex = 0  # z-index of the widget
}

shape {
    # monitor = [[Empty]]  # monitor to draw on
    # size = 100, 100  # size of the shape
    # color = rgba(17, 17, 17, 1.0)  # color of the shape
    # rounding = -1  # negative values result in a circle
    # rotate = 0  # rotation in degrees, counter-clockwise
    # border_size = 0  # border size
    # border_color = rgba(0, 207, 230, 1.0)  # border color
    # xray = false  # if true, make a “hole” in the background (rectangle of specified size, no rotation)
    # position = 0, 0  # position of the shape
    # halign = center  # horizontal alignment
    # valign = center  # vertical alignment
    # zindex = 0  # z-index of the widget
}
label {  # Date
    monitor = DP-1
    text = cmd[] echo $(date +"%A, %B %d")
    color = rgba(254, 254, 254, 1.0)
    font_size = 14
    font_family = GeistMono Nerd Font
    position = 0, 25%
    halign = center
    valign = center
}

label {  # Time
    monitor = DP-1  # monitor to draw on
    text = cmd[update:1000] echo $(date +"%I:%M:%S")  # text to render
    # text_align = center  # multi-line text alignment inside label container. center/right or any value for default left
    color = rgba(254, 254, 254, 0.80)  # color of the text
    font_size = 60  # size of the font
    font_family = GeistMono Nerd Font  # font family
    # rotate = 0  # rotation in degrees, counter-clockwise
    position = 0, 20%  # position of the label
    halign = center  # horizontal alignment
    valign = center  # vertical alignment
}

shape {  # Username Background
    monitor = DP-1
    size = 250, 50
    color = rgba(255, 255, 255, .1)
    rounding = -1
    border_size = 0
    border_color = rgba(253, 198, 135, 0)
    rotate = 0
    xray = false # if true, make a "hole" in the background (rectangle of specified size, no rotation)
    position = 0, -20%
    halign = center
    valign = center
}

label {  # Username
    monitor = DP-1
    text = cmd[] echo " $(echo "$USER" | sed -E 's/^(.)(.*)/\U\1\L\2/')"
    color = rgba(216, 222, 233, 0.80)
    outline_thickness = 2
    dots_size = 0.2 # Scale of input-field height, 0.2 - 0.8
    dots_spacing = 0.2 # Scale of dots' absolute size, 0.0 - 1.0
    dots_center = true
    font_size = 15
    font_family = GeistMono Nerd Font
    position = 0, -20%
    halign = center
    valign = center
}

input-field {  # password field..
    monitor = DP-1  # monitor to draw on
    size = 250, 50  # size of the input field (<width>, <height>)
    outline_thickness = 2  # thickness of the outline
    dots_size = 0.15  # size of the dots. [0.2 - 0.8]
    dots_spacing = 0.40  # spacing between dots. [-1.0 - 1.0]
    dots_center = true  # whether to center the dots. align left otherwise
    dots_rounding = -1  # rounding of the dots
    # dots_text_format = [[Empty]]  # text character(s) used for the input indicator, rounded rectangles are the default
    outer_color = rgba(0, 0, 0, 0)  # border color
    inner_color = rgba(255, 255, 255, 0.1)  # color of the inner box
    font_color = rgb(200, 200, 200)  # color of the font
    font_family = GeistMono Nerd Font  # font family
    fade_on_empty = false  # fade the input field when empty
    # fade_timeout = 2000  # milliseconds before fade_on_empty is triggered
    placeholder_text = <i> Password...</i>  # text rendered in the input box when it’s empty
    # hide_input = false  # render an input indicator similar to swaylock instead of dots when set to true
    rounding = -1  # -1 means complete rounding (circle/oval)
    check_color = rgb(30, 107, 204)  # color accent when waiting for the authentication result
    fail_color = rgba(ff6633ee) rgba(ff0066ee) 40deg  # color accent when authentication fails
    fail_text = <i>$FAIL <b>($ATTEMPTS)</b></i>  # text rendered when authentication fails
    # fail_timeout = 2000  # milliseconds before fail_text and fail_color disappears
    capslock_color = [[Empty]]  # color accent when capslock is active
    # numlock_color = [[Empty]]  # color accent when numlock is active
    # bothlock_color = [[Empty]]  # color accent when both locks are active
    # invert_numlock = false  # change color if numlock is off
    # swap_font_color = false  # swap font and inner colors on color change events
    position = 0, -26%  # position of the input field
    halign = center  # horizontal alignment
    valign = center  # vertical alignment
    # zindex = 0  # z-index of the widget
}
